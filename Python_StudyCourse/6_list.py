'''
列表
创建列表: 使用中阔号将所有准备放进列表中的元素包裹起来, 不同元素之间使用逗号分隔
同一个列表中可以包含不同的数据类型

序列
字符串是一个序列, 列表也是一个序列
可以使用for循环来访问序列中的每一个元素, 访问序列中的某一个元素可以使用方括号; 这叫做下标
比如: s = [1, 2, 3, 4, 5, 6, '7', 8, '9', '10', '上山打老虎']
s[0]    代表s的第1个元素 1
s[1]    代表s的第2个元素 2
s[2]    代表s的第3个元素 3

再比如: a = '一二三四五', '上山打老虎', '老虎打不着', '打到小松鼠' 
a[0]    代表a的第1个元素 '一二三四五'
a[1]    代表a的第2个元素 '上山打老虎'
a[2]    代表a的第3个元素 '老虎打不着'
下标索引序列的最后一个元素可以用 [-1], 第二个使用[-2]

列表切片

元素[:]
例如: s = [1,2,3,4,5,6]
s = [1, 2, 3, 4, 5, 6, '7', 8, '9', '10', '上山打老虎']

print(s[0:4])    ---取列表s的第1个到第4个元素
print(s[3:7])    ---取列表s的第4个到第7个元素
print(s[:3])     ---取列表s的第1个到第3个元素
print(s[:-3])    ---取列表s的第一个到倒数第三个元素
print(s[3:])     ---取列表s的第4个到最后一个元素
print(s[:])      ---取出列表s的全部元素
print(s[2:8:2])  ---取出列表s的第3个到第8个元素, 步长为2, 意义为每隔一个取一个
print(s[::3])    ---取出列表s的全部元素, 步长为3, 意义为每隔两个取一个
print(s[::-2])   ---取出列表s的全部元素, 步长为2, 从末尾开始取, 意义为每隔一个取一个

#倒序输出
print(s[::-1])
a = 'Hello,jary'
print(a[::-1])



列表的各种方法
增
list.append() ------- 往列表末尾添加一个元素, 这个元素可以是一个可迭代对象(列表或字符串), 也可以是一个数字 
list.extend() ------- 往列表末尾添加多个元素, 如果添加的是一个字符串, 那么就会把这个字符串拆成一个个列表添加进去, 如果添加的是一个列表, 则会将列表内的元素拼接加到列表末尾
list.insert() ------- insert方法有两个参数, 第一个指定添加列表中的位置, 第二个指定添加的元素 list.inert(3, '哈哈哈'), 添加对象可以是字符串, 也可以是一个列表

删
list.remove() ------- 删除列表中的指定元素, 每次只能删除一个 list.remove(xxxxx)
list.pop() ------- 弹出列表中指定的元素, 参数为改元素的下表, 返回这个被弹出的元素 list.pop(1)
list.clear() ------- 清空整个列表

改
list[4] = [xxx] -------   使用列表切片的方法, 索引列表中某个元素的下表, 给该元素重新赋值, 修改该元素的值
list[3:] = [xxx, yyy, zzz]  使用切片的方法将列表中下标为3以后的全部元素替换为新的元素

查
list[x] -------  查找列表中下标为 x 元素的值
list[x:y] -------查找列表中标为 x:y 中元素的值

排序
list.sort
n = [3, 6, 4, 1, 0, 5, 7]  --------使用list.sort()方法将列表中的元素按照从小到大进行排序, 列表里面可以是数字, 也可以是字符串
list.sort(reverse = True)  --------sort方法使用参数reverse = True, 相当于将执行list.sort()后执行list.reverse(), 这样就可以实现列表中的元素按照从大到小进行排序

list.reverse
n = [3, 6, 4, 1, 0, 5, 7]  --------使用list.reverse()方法将列表中的元素原地进行反转, 相当于从右往左把下标顺序重新进行排列

查找列表中元素的个数
list.count(x) ------- 使用list.count(x)方法查找list中有几个x, 返回x的数量

查找列表中某个元素的下标位置
list.index(x) ------- 使用list.index(x)方法查找 x 在list中的下标值, 如果列表中有多个的话会返回第一个
list.index(x, start, end) ------- 使用list的index(x, start, end)方法, 查找从起始位置到结束位置中x的下标值, 包含end

复制
list.copy()
s = list.copy()  ------- 将list重新拷贝一份, 到s中


' is '  --- 用于检验两个变量是否指向用同一个对象的运算符, 但是python对于不同对象的储存机制是不一样的 比如：
a = 'fishc'
b = 'fishc'
此时 a is b, 结果就会返回True

x = [1]
y = [1]
此时 x is y, 结果就会返回False

浅拷贝
list.copy();    x = y[:]   这两种都为浅拷贝, 浅拷贝只是拷贝了外层对象, 如果该对象是嵌套, 那么拷贝的只是其引用

深拷贝
import copy    导入copy模块, copy中有个copy()和deepcopy()方法, 用来接收被拷贝的对象
其中copy()方法是浅拷贝, 而deepcopy()则是深拷贝



列表推导式
语法结构：  执行代码 for i in x
比如传统for 循环
x = [1 ,2 ,3 ,4 ,5 ,6]
for i in x:
    x [i -1] = x[i - 1] * 2

此时我们可以用列表推导式
x = [i * 2 for i in x]

列表推导式还可以进行条件判断
[i for i in range(100) if i %2 == 0]   等同于 
x = []
for i in range(100):
    if i % 2 ==0:
        x.append(i)
  
列表推导式还可以进行多个语句判断
[[x, y] for x in range(100) if x % 2 == 0 for y in range(100) if y % 3 == 0]  等同于
_ = []
for x in range(100):
    if x % 2 == 0:
        for y in range(100):
            if y % 3 == 0:
                _.append([x, y])
 


'''
