'''
string

字符串是一个序列
字符串可以用切片的方式进行查找等
s = '12321'
s[::] 就等于 s[::-1] s是一个回文数

字符串用法大合集
1, capitalize()----------------------------------返回一个首字母大写版本的新字符串(新字符串的首字母变为大写, 其他字母变为小写)
2, casefold()------------------------------------返回一个小写版本的字符串(新字符串的所有字母变为小写)
3, center(width, fillchar='')--------------------返回一个字符居中的新字符串(width <=字符串长度, 新字符串=原字符串; width>字符串宽度, 所有字符
居中, 左右使用fillchar参数指定的字符填充)
4, count(sub,[start,[end]])----------------------返回sub字符串中不重叠的出现次数, 可选参数为start和end, 用来控制起始位置和结束位置
5, encode(encoding='utf-8', errors='strict')-----以encoding参数指定的编码格式对字符串进行编码. errors参数指定编码出现错误时的解决方案, 
默认的 strict 表示如果出错, 则抛出一个UnicodeEncodeError的异常. 其他可用的参数值是'ignore', 'replace'和'xmlcharrefreplace'
6, endswith(suffix[, start[, end]]) -------------如果字符串是以suffix指定的子字符串为结尾, 那么返回True, 否则返回False; 可选参数start
和end, 用于指定起始位置和结束位置, suffix 参数允许以元组的形势提供多个字符串
7, expandtabs([tabsize=8]) ----------------------返回一个使用空格替换制表符的新字符串, 如果没有指定tabsize参数, 那么默认一个制表符 = 8个空格
8, find(sub[, start[, end]])---------------------在字符串中查找sub字符串, 返回匹配最低索引值; 可选参数start和end用于指定起始和结束位置; 若未能
找到字符串, 则返回 -1
9, format(*args, **kwargs)------------------------返回一个格式化的新字符串;使用位置参数args和关键字参数kwargs进行替换
10, format_map(mapping)---------------------------返回一个格式化的新字符串, 使用映射参数mapping进行替换
11, index(sub[, start[, end]])--------------------在字符串中查找sub字符串, 返回匹配最低的索引值, 可选参数start和end用于指定起始位置和结束位置;
若未能找到字符串, 抛出ValueError异常
12, isalnum()-------------------------------------如果字符串中至少有一个字符并且是所有字符都是字母或数字则返回True, 否则返回false
还有N多方法  慢慢补充






join 拼接字符串: 'str'.join(可迭代对象)

format的一些用法: 
year = 20
1, '某某公司成立于{}年'.format(year)
2, '1 + 2 = {}, 2的平方是{}, 3的立方是{}'.format(1 + 2, 2 * 2, 3 * 3 * 3)
3, '{0}看到{1}就很激动'.format('小甲鱼', '小姐姐')
4, '{0}的东西就是{0}的, 谁也不能碰'.format('我')
5, '{0}{0}{1}{1}'.format('是', '非')
6, '我叫{name}, 我爱{country}'.format(country = '中国', name = '邢兆年')
7, '我叫{name}, 我爱{0}, 爱{0}的人运气都不会太差'.format('python', name = '邢兆年')  关键字需要放到参数位置最后
8, '{0:^10}'.format('haha')  0代表位置参数, : : 代表参数选项, :后面跟参数,  ^ 代表两侧对齐 10 代表对齐宽度
9, '{name:^10}'.format(name = 'huhu')  name代表关键字参数, : 代表参数选项, :后面跟参数,  ^ 代表两侧对齐 10 代表对齐宽度
10, '{:+} {:-}'.format(250, -520)  : 代表参数选项, :后面跟参数, + 表示往正数数字前加 + 号, - 表示往负数前加 - 号, 参数只支持数字(整数或浮点数)
11, '{:,}'.format(12345)  : 代表参数选项, :后面跟参数, , 号表示设置参数的千分位分隔符; 把 , 也可替换为 _ , 参数不足千不显示
12, '{:.2f}'.format(3.1415) : 代表参数选项, :后面跟参数, .表示设置精度, 2表示保留浮点数后两位, f表示f类型的浮点数
13, '{:.2g}'.format(3.1415) : 代表参数选项, :后面跟参数, .表示设置精度, 2表示保留浮点数前后共两位, g表示g类型的浮点数
14, '{:.6}'.format('你好啊你吃饭了吗')  : 代表参数选项, :后面跟参数, .表示设置精度, 6表示保留几个字符   精度选项不允许应用在整数(int)中
15, '{:b}'.format(10)  : 代表参数选项, :后面跟参数, b 表示将参数以二进制形式输出
16, '{:c}'.format(20)  : 代表参数选项, :后面跟参数, c 表示将参数以unicode形式输出
17, '{:d}'.format(30)  : 代表参数选项, :后面跟参数, d 表示将参数以十进制的形式输出
18, '{:o}'.format(40)  : 代表参数选项, :后面跟参数, o 表示将参数以八进制的形式输出
19, '{:x}'.format(50)  : 代表参数选项, :后面跟参数, x 表示将参数以十六进制的形式输出
20, '{:e}'.format(60)  : 代表参数选项, :后面跟参数, e 表示将参数以科学计数法的形式输出
21, '{:f}'.format(70)  : 代表参数选项, :后面跟参数, f 表示将参数以定点表示法的形式输出(默认精度为6)
22, '{:%}'.format(80)  : 代表参数选项, :后面跟参数, % 表示将参数以百分号的形式输出(参数先乘以100, 再加百分号, 默认小数点后6位数字, 可以使用精度修改)  
format的语法糖:
前缀使用 f 来表示这是一个格式化的字符串
f'某某公司成立于{year}年'  f代表.format  等同于 '某某公司成立于{}年'.format(year)
f'1 + 2 = {1 + 2}, 2的平方是{2 * 2}, 3的立方是{3 * 3 * 3}'
f'{123456:,}'
f'{3.1415:.2f}'
'''