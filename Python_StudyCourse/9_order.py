r'''
序列共同点: 1.都可以通过索引来获取每一个元素;  2.第一个索引值都是0;  3.都可以通过切片方法获取一个范围; 4.都有很多共同的运算符
序列可分为可变序列和不可变序列, 列表是一个可变序列, 而元组和字符串则是不可变序列
' + ' 和 ' * '可以在序列中使用, 加法代表拼接, 乘号代表将序列进行重复, 也就是拷贝的意思
[1, 2, 3,] + [4, 5, 6] = [1, 2, 3, 4, 5, 6]
(1, 2, 3,) + (4, 5, 6) = (1, 2, 3, 4, 5, 6)
'123' + '456' = '123456'
[1, 2, 3] * 3 = [1, 2, 3, 1, 2, 3, 1, 2, 3]
(1, 2, 3,) * 3 = (1, 2, 3, 1, 2, 3, 1, 2, 3)
'123' * 3 = '123123123'

is 和 is not 用来检测对象的id是否相等, 从而判断是否是一个对象, 被称之为统一性运算符
in 和 not in 用来检测某个元素是否包含在序列中, not in恰恰相反
del 用于删除一个或者多个指定的对象或者删除序列中某个元素, 例如
x = [1, 2, 3]
y = '4, 5, 6'
del x, y    这样就把x, y给完全删除掉了
del x[1]    这样就把x中索引值为1的元素给删除掉了
clear() 用于清除列表里面的所有元素   x = [1, 2, 3, 4]        x.clear()


表列、元组和字符串的互相转换
list('fishc') = ['f', 'i', 's', 'h', 'c']
list((1, 2, 3, 4, 5)) = [, 2, 3, 4, 5]
tuple('fishc') = ('f', 'i', 's', 'h', 'c')
tuple([, 2, 3, 4, 5]) = ((1, 2, 3, 4, 5))
str([1, 2, 3, 4, 5]) = '[1, 2, 3, 4, 5]'
str((1, 2, 3, 4, 5)) = '(1, 2, 3, 4, 5)'


min() & max()  对比传入的参数, 并且返回最小和最大值
s = [1, 1, 2, 3, 5]
min(s)  返回1
t = 'Fishc'
max(t)   返回's'  (比较字符的编码值)
min() 和 max() 方法中如果传入的值(序列) 为空的话会报错
s = None 
min(s, default = '啥都没有')  返回'啥都没有'

len() & num()
len() 有最大可承受范围 len(range(2 ** 100)) 就会报错
对于32位平台来说这个最大的值为 2 **31 -1, 64位平台来说 2 ** 63 - 1
s = [1, 2, 3, 4, 5]
sum(s) = 15;            1 + 2 + 3 + 4 + 5 = 15
sum(s, start = 100) 代表从100开始加, 即 115

sorted() & reversed()
s = [1, 2, 3, 0, 6]
sorted(s) 返回一个全新的列表[0, 1, 2, 3, 6], 原列表s 不受影响; 而使用sort()就会在原列表进行排序, 原列表就变为了排序后的列表
sorted() 支持reverse, sorted(s, reverse = Ture) 返回[6, 3, 2, 1, 0]
t = ['FishC', 'Apple', 'Book', 'Banana', 'Pen']
sorted(t) 返回['Apple', 'Banana', 'Book', 'FishC', 'Pen'] 利用每个元素的首字母对应的编码进行排序
sorted(t, key = len)  key = len表示取每个元素的长度进行排序
列表的sort() 方法只能处理列表, 而sorted()则可以处理所有序列
reversed() 返回一个迭代器
s = [1, 2, 5, 8, 0]
reversed(s) 返回 <reversed object at 0x000001D50EED7F10>, 通过list()可以取出, 或者通过for循环该对象也可以取出
list(reversed(s)) 返回一个全新列表 [0, 8, 5, 2, 1]
s.reverse() 同s.sort(), 都是改变原列表进行反转
同样reversed() 可以处理所有序列, 


all() & any()
all()用来判断可迭代对象中的元素是否全部为真, 如果全部为真则返回True, 否则返回False
all([0, 1, 2, 3,]) 返回Fasle
any()用来判断可迭代对象中的元素是否有一个为真, 如果有则返回True, 否则返回False
any([0, 1, 2, 3,]) 返回True
enumerate()
enumerate()函数用于返回一个枚举对象, 它的功能就是将可迭代对象中的每个元素及从0开始的序号共同构成一个二元组的列表
enumerate(['Spring', 'Summer', 'Fall', 'Winter']) 返回一个 enumerate object 对象, 使用list可以进行取出 
list(enumerate(['Spring', 'Summer', 'Fall', 'Winter'])) 返回 [(0,'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
enumerate() 可指定序号开始的值 list(enumerate(['Spring', 'Summer', 'Fall', 'Winter']), start = 100) 返回 [(100, 'Spring'), (101, 'Summer'), (102, 'Fall'), (103, 'Winter')]
zip()
zip()函数用于创建一个聚合多个可迭代对象的迭代器, 它会将作为参数传入的每个可迭代对象的每个元素一次组合成元组, 即第i个元组包含来自每个参数的第i个元素
x = [1, 2, 3]
y = [4, 5, 6]
zip(x, y) 返回一个zip object, 利用list可以取出 list(zip(x,y)) 返回 [(1, 4), (2, 5), (3, 6)]
map()
map()函数会根据提供的函数对指定的可迭代对象的每个元素进行运算, 并将返回运算结果的迭代器
mapped = list(map(ord, 'FishC')), mapped就等于 ord函数对每个'FishC'进行转换, 相当于ord('F'), ord('i'), ord('s'), ord('h'), ord('C')
如果map内第一个参数需要多参数来运算的话, 直接同步修改操作的可迭代对象参数数量即可, list(map(pow, [1, 2, 3], [4, 5, 6]))
filter()
filter()函数会根据提供的函数指定的可迭代对象的每个元素进行运算, 并将运算结果为真的元素, 以迭代器的形式返回, 为假不返回哦~
list(filter(str.islower, 'FishC')) 返回 ['i', 's', 'h']
迭代器 VS 可迭代对象
一个迭代器一定是一个可迭代对象
可迭代对象可以重复使用, 而迭代器则是一次性的
iter()
传入一个可迭代对象使其变为一个迭代器
x = [1, 2, 3, 4, 5]
y = iter(x)
type(y)
next()
next()函数逐个将迭代器中的元素提取出来
x = [1, 2, 3, 4, 5]
y = iter(x)
next(y) = 1
next(y) = 2
next(y) = 3
next(y) = 4
next(y) = 5
next(y) 报异常, StopIteration, 因为已经没有下一个了
next()传入第二个参数可以抛出自定义异常
next(y, '迭代器中为空！！！'), 当迭代器空了的时候就会弹出自定义异常












'''